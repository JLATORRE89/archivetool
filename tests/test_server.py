# tests/test_server.py
import os
import threading
import http.server
import socketserver
import tempfile
import time
from pathlib import Path

class TestServer:
    """
    A simple HTTP server for testing the archiver with dynamic content.
    This creates a temporary directory with test HTML files and serves them over HTTP.
    """
    def __init__(self, port=0):
        """
        Initialize the test server.
        
        Args:
            port (int): Port to use for the server. If 0, a random available port will be used.
        """
        self.port = port
        self.temp_dir = tempfile.mkdtemp()
        self.server = None
        self.server_thread = None
        self.base_url = None
        
    def setup(self):
        """
        Set up the test server with sample files.
        """
        # Create test files
        self._create_test_files()
        
        # Start the server
        self._start_server()
        
        # Return the base URL
        return self.base_url
        
    def _create_test_files(self):
        """
        Create test HTML and asset files in the temporary directory.
        """
        # Create main index.html with links and dynamic content
        index_path = os.path.join(self.temp_dir, "index.html")
        with open(index_path, "w") as f:
            f.write("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Archiver Test Site</title>
                <link rel="stylesheet" href="style.css">
                <script src="script.js"></script>
            </head>
            <body>
                <h1>Archiver Test Site</h1>
                <div id="content">
                    <p>This is a test site for the Website Archiver.</p>
                    <div id="loading">Loading dynamic content...</div>
                    <div id="dynamic-content"></div>
                </div>
                <div class="links">
                    <h2>Site Pages:</h2>
                    <ul>
                        <li><a href="page1.html">Page 1</a></li>
                        <li><a href="page2.html">Page 2</a></li>
                        <li><a href="/subdir/page3.html">Page 3 (Subdirectory)</a></li>
                    </ul>
                </div>
                <div class="images">
                    <h2>Test Images:</h2>
                    <img src="images/test1.png" alt="Test Image 1">
                    <img src="images/test2.png" alt="Test Image 2">
                </div>
            </body>
            </html>
            """)
        
        # Create CSS file
        css_path = os.path.join(self.temp_dir, "style.css")
        with open(css_path, "w") as f:
            f.write("""
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f5f5f5;
            }
            
            h1 {
                color: #333;
            }
            
            .links {
                background-color: #e0e0e0;
                padding: 10px;
                margin: 20px 0;
                border-radius: 5px;
            }
            
            .images {
                display: flex;
                flex-direction: column;
                gap: 10px;
            }
            
            img {
                max-width: 300px;
                border: 1px solid #ddd;
            }
            
            #loading {
                color: orange;
                font-weight: bold;
            }
            
            #dynamic-content {
                margin-top: 20px;
                padding: 10px;
                border: 1px dashed #999;
            }
            """)
        
        # Create JavaScript file with dynamic content
        js_path = os.path.join(self.temp_dir, "script.js")
        with open(js_path, "w") as f:
            f.write("""
            // Wait for the document to be ready
            document.addEventListener('DOMContentLoaded', function() {
                // Simulate loading delay
                setTimeout(function() {
                    // Update loading text
                    document.getElementById('loading').textContent = 'Content loaded!';
                    document.getElementById('loading').style.color = 'green';
                    
                    // Add dynamic content
                    var dynamicContent = document.getElementById('dynamic-content');
                    dynamicContent.innerHTML = `
                        <h3>Dynamically Generated Content</h3>
                        <p>This content was generated by JavaScript after the page loaded.</p>
                        <ul id="dynamic-list">
                            <li>Item 1 - Generated at ${new Date().toLocaleTimeString()}</li>
                            <li>Item 2 - Random value: ${Math.random().toFixed(5)}</li>
                            <li>Item 3 - Another dynamic item</li>
                        </ul>
                    `;
                }, 1000);
                
                // Add additional dynamic elements after a longer delay
                setTimeout(function() {
                    var list = document.getElementById('dynamic-list');
                    var newItem = document.createElement('li');
                    newItem.textContent = 'Item 4 - Added after another delay';
                    newItem.className = 'delayed-item';
                    list.appendChild(newItem);
                }, 2500);
            });
            """)
        
        # Create additional pages
        page1_path = os.path.join(self.temp_dir, "page1.html")
        with open(page1_path, "w") as f:
            f.write("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Page 1 - Archiver Test</title>
                <link rel="stylesheet" href="style.css">
            </head>
            <body>
                <h1>Page 1</h1>
                <p>This is page 1 of the test site.</p>
                <a href="index.html">Back to Home</a>
            </body>
            </html>
            """)
        
        page2_path = os.path.join(self.temp_dir, "page2.html")
        with open(page2_path, "w") as f:
            f.write("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Page 2 - Archiver Test</title>
                <link rel="stylesheet" href="style.css">
                <script src="script.js"></script>
            </head>
            <body>
                <h1>Page 2</h1>
                <p>This is page 2 of the test site.</p>
                <div id="loading">Loading dynamic content...</div>
                <div id="dynamic-content"></div>
                <a href="index.html">Back to Home</a>
            </body>
            </html>
            """)
        
        # Create subdirectory
        subdir = os.path.join(self.temp_dir, "subdir")
        os.makedirs(subdir, exist_ok=True)
        
        page3_path = os.path.join(subdir, "page3.html")
        with open(page3_path, "w") as f:
            f.write("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>Page 3 - Archiver Test</title>
                <link rel="stylesheet" href="../style.css">
            </head>
            <body>
                <h1>Page 3 (Subdirectory)</h1>
                <p>This is page 3 in a subdirectory.</p>
                <a href="../index.html">Back to Home</a>
            </body>
            </html>
            """)
        
        # Create images directory and test images
        images_dir = os.path.join(self.temp_dir, "images")
        os.makedirs(images_dir, exist_ok=True)
        
        # Create simple test images (1x1 pixel PNG)
        for i in range(1, 3):
            # Create a very simple 1x1 PNG (minimal content)
            img_path = os.path.join(images_dir, f"test{i}.png")
            with open(img_path, "wb") as f:
                # Minimal valid PNG file (1x1 transparent pixel)
                f.write(bytes.fromhex(
                    '89504e470d0a1a0a0000000d49484452000000010000000108060000001f15c4'
                    '890000000d4944415478da63f8ffff3f0300050001f90e71580000000049454e44ae426082'
                ))
    
    def _start_server(self):
        """
        Start the HTTP server in a separate thread.
        """
        # Create server
        handler = http.server.SimpleHTTPRequestHandler
        
        class TestServerHandler(handler):
            def __init__(self, *args, **kwargs):
                # Set the directory to our temp dir
                self.directory = self.temp_dir
                super().__init__(*args, directory=self.directory, **kwargs)
        
        # Bind the handler to our temp directory
        TestServerHandler.temp_dir = self.temp_dir
        
        # Create and start the server
        self.server = socketserver.TCPServer(("", self.port), TestServerHandler)
        self.port = self.server.server_address[1]  # Get the actual port if it was set to 0
        
        # Start server in a thread
        self.server_thread = threading.Thread(target=self.server.serve_forever)
        self.server_thread.daemon = True
        self.server_thread.start()
        
        # Set the base URL
        self.base_url = f"http://localhost:{self.port}"
        
        # Give the server a moment to start
        time.sleep(0.5)
    
    def shutdown(self):
        """
        Shut down the test server and clean up resources.
        """
        if self.server:
            self.server.shutdown()
            self.server.server_close()
        
        # Remove the temporary directory
        import shutil
        shutil.rmtree(self.temp_dir)


if __name__ == "__main__":
    # If run directly, start a test server and keep it running
    server = TestServer(port=8888)
    base_url = server.setup()
    print(f"Test server running at {base_url}")
    print("Press Ctrl+C to stop")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("Shutting down...")
    finally:
        server.shutdown()